!!Before we start

Clap is the new library for implementing ''command line applications'' in Pharo.
In this book, all examples assume that Pharo runs under a unix-like operating system (macOS or Linux).


!!!Command line applications

A command line application consists of a single command or of several related commands designed to be used either interactively from a shell, or programmatically in shell scripts.
Clap supports applications with rich command line syntax, supporting positional parameters, flags or options, and even nested subcommands like ==git==; it also tries to follow well-established conventions like short and long alternative syntaxes for flags.

The example below shows two different uses of the standard ==seq== shell command, which generates numeric sequences:
[[[language=shell
> seq 3
1
2
3
> seq -s : 5 12
5:6:7:8:9:10:11:12
]]]

@@note In this book, code blocks show either the recording of a shell session, as above, or pieces of Pharo code, which you will recognize from the syntax. In shell sessions, lines starting with ==>== represent the command prompt followed by a command entered at that point; subsequent lines, up to the next prompt, show the output of that command.


!!!Pharo from the command line

To follow along the examples in this book, you will need to make Pharo available from the command line.
The easiest way is to install a standalone Pharo as described at *https://www.pharo.org/download#standalone*, instead of using Pharo Launcher.

The following instructions install a suitable virtual machine.
This assumes that the directory ==~/bin== is already in your ==$PATH==; feel free to pick someplace else but make sure to adapt your shell configuration accordingly.
[[[language=shell
> cd ~/bin
> curl https://get.pharo.org/64/vm80 | bash
]]]

The virtual machine comes with two executable wrapper scripts.
To open an image with its graphical user interface active, run it with ==pharo-ui==:
[[[language=shell
> pharo-ui Pharo8.image
]]]

Conversely, ==pharo== runs the image ''headless'', which is what we will use with Clap; note that in the absence of arguments, the image immediately quits with a help message:
[[[language=shell
> pharo Pharo8.image
]]]

To run Clap commands, follow the image name with the ==clap== keyword, then the command itself.
Clap comes with the traditional ''"hello world"'' as an example, if you want to try it:
[[[language=shell
> pharo Pharo8.image clap hello
hello, world.
> pharo Pharo8.image clap hello "pharo and clap"
hello, pharo and clap.
]]]


!!!Shell tricks for convenience

You will certainly find that repeating the virtual machine and image names before each and every command is a little tedious.
To make this more convenient, we advise that you define the following shell alias, which makes ==clap== look more like an actual shell command:
[[[language=shell
> alias clap='pharo Pharo8.image clap'
> clap hello
hello, world.
]]]

We could also define a direct shell alias to the ==hello== command:
[[[language=shell
> alias hello='pharo Pharo8.image clap hello'
> hello
hello, world.
]]]

However, while aliases make fine shortcuts, they are usually limited to interactive use, as a personal convenience feature.
To deploy a Clap command in the system's ==$PATH==, a wrapper shell script is good solution;
make such a script executable, place it under your ==$PATH==, ''et voil√† !''
You now have a shell program implemented in Pharo!
[[[language=bash
#!/bin/bash
exec pharo Pharo8.image clap "$@"
]]]

Alternatively, functions provide a more scoped abstraction:
[[[language=bash
#!/bin/bash
function clap() { pharo Pharo8.image clap "$@"; }
function hello() { clap hello "$@"; }
# and later, in the script's body...
hello
]]]

Note that =="$@"== passes all function arguments unchanged to the callee, as if they were ''individually'' quoted.
Please consult your shell's documentation for further enlightenment on shell semantics and for advice on best practices.

@@note From this point on, we will use the ==clap== shortcut defined above. Since both the alias and the script provide the same syntax, either is fine; however, pay attention that the image name is correct, and, unless it's an absolute path to the image file, that your shell session is in the correct working directory.


!!!Deploying Clap commands

A single Pharo image can host several Clap commands; in fact the base image includes commands for automating development tasks like loading code or running tests.
Loading additional commands into an image is as simple as loading the corresponding packages; Clap discovers declared commands automatically.

However, either when loading commands in an image, installing them on your own system, or packaging them for other users to install, you will have to consider a few gotchas:
- Two commands installed in a common image cannot have the same name.
- The wrapper script for a command must know which image to run and with which VM; if one or the other are known by relative path, then the working directory matters.
- Commands can modify their host image, inducing side-effects between successive runs or between independent commands hosted in a common image.
We do not have generic answers to those questions but we are interested in your feedback.


!!Clap by Example

Through simple examples, this chapter shows how to specify the syntax and behavior of Clap commands.


!!!Declaring a command

Clap relies on a simple convention for registering commands: any class-side unary method with the ==<commandline>== pragma is a factory method that returns the specification of a unique command.

As a first example, let's build a command that enumerates the months in the year.
We start with a new empty class:
[[[
Object subclass: #ClapBookletMonthsCommand
  slots: {}
  classVariables: {  }
  package: 'Clap-BookletExamples'
]]]

Then, on the class-side, we add a unary method with the ==<commandline>== pragma, and which returns the specification of a command named ==months==:
[[[
ClapBookletMonthsCommand class >> commandSpecification
  <commandline>
  ^ ClapCommand id: #months
]]]

@@note Before trying commands, save the image. This is necessary because every command line invocation spawns a separate virtual machine, which will load the image as it is on disk.

After saving the image, switch to a terminal window and try either the explicit or the short version:
[[[language=shell
> pharo Pharo8.image clap months
> clap months
]]]

Of course, since we have not given any behavior to the command yet, you should not see any output.
However, Clap takes care of terminating the execution with an exit status of zero, indicating success.

If you try a command or parameters that do not exist, mistype the name, or forget to save the image after declaring the command, the exit status should be nonzero, indicating that the command failed, and you should get an error message:
[[[language=shell
> clap oops wrong command
Unrecognized arguments: oops, wrong, command
> echo "exit status was $?"
exit status was 1
]]]

@@note Clap is case-sensitive when matching the names of commands and other named parameters.


!!!Giving behavior to a command

As a start, let's have our ==months== command print the month numbers one to twelve.
We configure the command's behavior by setting its ''meaning'' block, as follows:
[[[
commandSpecification
  <commandline>
  ^ (ClapCommand id: #months)
    meaning: [ :commandMatch | | out |
      out := commandMatch context stdout.
      (1 to: 12)
        do: [ :each | out << each asString ]
        separatedBy: [ out space ].
      out newLine ]
]]]

When Clap recognizes a command, it evaluates that command's ==#meaning:== block, passing it a ''match'' object which describes the command invocation.
The match also provides access to contextual resources like the standard output stream.
[[[language=shell
> clap months
1 2 3 4 5 6 7 8 9 10 11 12
]]]


!!!Trying a command from the workspace

For development convenience, we can run commands directly from the Pharo workspace.
To try that, send the ==#activateWith:== message to our ==months== command, passing the array of words that would be typed to invoke it:
[[[
ctx := ClapBookletMonthsCommand commandSpecification
  activateWith: #('months').
]]]

@@note Always pass an array of ''strings'' to ==#activateWith:==, starting with the name of the command itself.

Because it's a convenience method, ==activateWith:== runs the command in a special debug context, which it then returns, so that it can be inspected.
For instance, we can obtain the command's output as a string:
[[[
ctx stdio stdout contents utf8Decoded
]]]


!!!Specifying parameters

Let's say we want to only enumerate between two given months:
[[[language=shell
> clap months 5 10
5 6 7 8 9 10
]]]

We modify the command specification as follows:
[[[
commandSpecification
  <commandline>
  ^ (ClapCommand id: #months)
    add: (ClapPositional id: #start);
    add: (ClapPositional id: #end);
    meaning: [ :commandMatch | | out start end |
      out := commandMatch context stdout.
      start := (commandMatch at: #start) word asNumber.
      end := (commandMatch at: #end) word asNumber.
      (start to: end)
        do: [ :each | out << each asString ]
        separatedBy: [ out space ].
      out newLine ]
]]]

First, we extend the command specification with two new parameters.
We model the start and end month as positionals, each with it its own unique identifier, and add them to the command.

Second, we update the command's behavior.
The match for the whole command  contains a smaller match for each positional; we look those up by their identifiers, and interpret the corresponding command line words as numbers.


!!!Positionals, flags, and commands

Compound parameter specifications, like our second version of the ==months== command, are composed of various kinds of parameters nested together using the ==#add:== message.
To strike a balance between following established conventions and keeping a simple and coherent model, Clap provides three kinds of parameters, each with specific nesting, matching, and semantic properties:

- ''Positionals'' are recognized in order, relative to their sibling positionals, and do not have child parameters of their own; they convey meaning through the form of the word they match, once parsed into some adequate domain value, like a number or an URL.

- ''Flags'' are parameters identified by keywords which usually start with dashes to distinguish them from other parameters; they are also know as ''options'' in the jargon. They convey meaning through their presence, absence, number of occurrences, and order in the command line. A flag can have child positionals, resulting in a named parameter.

- ''Commands'' are identified by keywords. They can have positionals and flags as children parameters, but also other commands. Sibling commands are exclusive, and a subcommand takes precedence over its parent command, which helps with structuring applications into multiple subcommands.

@@note TODO example here

When Clap runs, it traverses the command specification, associating each word of the command line with the matching parameter; the nesting of matches therefore mirrors the nesting of specifications.
The application starts with the meaning block of the innermost subcommand; it needs to navigate and query the match tree to determine its course.
To this end, all parameters have a mandatory ''identifier'', which is unique among sibling parameters.

Besides their identifier, Clap parameters also have a ''name'' and a ''description string'' which are how the user knows them; for convenience, if no name is given, Clap derives it from the identifier.
Name and description also appear in generated documentation and help messages.


!!!Positional parameters

Positionals are the simplest form of parameters; successive sibling positionals are recognized in order, each matching a word from the command line.

Positionals are for passing values from an open-ended set, like numbers, URLs, file paths, application-specific identifiers, arbitrary strings‚Ä¶
The application is responsible for parsing the matched word into a proper domain value, and the user needs to remember the correct sequence between values and, to pay attention to the word-splitting rules of their shell and use quotes appropriately.

In our ==months== command, we used positionals for the start and end month.
The order in which we add them to their parent command determines the matching order, so the first argument will always be ==start== and the second one ==end==.
At this point, both arguments are just two strings, so the application parses them into numbers before starting the enumeration.


!!!Handling missing arguments

By adding parameters, we have made the command quite brittle: what if the user omits one or both arguments, expecting the command to work like the initial version?
Well, in both cases, Clap fails. :
[[[language=shell
> clap months 3
MessageNotUnderstood: ClapImplicit>>word
]]]

This is to be expected; it is the responsibility of the application to handle this case in a robust manner.
The first problem is in the way we used the matches:
[[[
start := (commandMatch at: #start) word asNumber.
end := (commandMatch at: #end) word asNumber.
]]]
By sending ==#word== to the matches for ==start== and ==end==, we assumed they would be ''explicit matches'', meaning they correspond to an actual word of the command line.
However, if the positionals were omitted, there is no such word, and the query returns an ''implicit match''.

There are several possible approaches here; we could use a query with a fallback like ==#at:ifPresent:ifAbsent:==:
[[[
start := commandMatch at: #start
    ifPresent: [ :m | m word asNumber ]
    ifAbsent: [ 1 ].
end := commandMatch at: #end
    ifPresent: [ :m | m word asNumber ]
    ifAbsent: [ 12 ].
]]]

[[[language=shell
> clap months 10
10 11 12
> clap months
1 2 3 4 5 6 7 8 9 10 11 12
]]]

This approach does work but you can see how the code for the command is starting to take care of a lot of details that should really be under the responsibility of the parameters themselves.

!!!Argument validation

@@note TODO

There is another way our command could fail: if the user types something that cannot be properly parsed into a number.


Let's extend the ==hello== command with a positional which specifies the recipient of the greeting.
To do this we make an instance of ==ClapPositional==, naming it ==who==, then we add it as a child to the command, and finally we extend the command's meaning block to use the new argument.
Note that a positional may be not given in such case we specify a default value using the message ==#implicitMeaning:==.

[[[
ClapBookletHelloExample class >> helloClap
  <commandline>
  ^ (ClapCommand withName: 'hello')
    add: ((ClapPositional withName: 'who')
      implicitMeaning: [ 'world' ]);
    meaning: [ :args |
      args context stdout
        << 'hello, ' ;
        << (args atName: 'who') value ;
        lf ]
]]]


We now have a parameterized greeting:

[[[language=shell
> clap hello Pharo
hello, Pharo
]]]

[[[language=shell
> clap hello
hello, world
]]]


!!!! What did we learn

The message ==#implicitMeaning:== provides the default value of the positionable when it is not given.
The messages ==#implicitMeaning:== as well as ==#meaning:== both expect a block as argument.
Also notice how the positionable argument is accessed from the method ==#meaning:== message via the message ==#atName:==.


!!! Playing more with positionals

Let us have fun with positional. Imagine that we want to have a simple command enumerating
consecutive period of the year as months.

[[[
> clap months 2 5
Counting, 2 3 4 5
]]]


[[[
> clap months
Counting, 1 2 3 4 5 6 7 8 9 10 11 12
]]]

We can define the command as follows:

[[[
myCounter
  <commandline>
  ^ (ClapCommand withName: 'months')
    	add: ((ClapPositional withName: 'from') implicitMeaning: [ 1 ]);
	 	add: ((ClapPositional withName: 'to') implicitMeaning: [ 12 ]);
    meaning: [ :args |
		| start end |
		start := (args atName: 'from') value asNumber.
		end := (args atName: 'to') value asNumber.
		args context stdout
			<< 'Counting, '.
		start to: end  do: [ :each | args context stdout << each asString ; space ]
		]
]]]

What we see is that positionals are read in sequence.

[[[
> clap months 5
Counting months, 5 6 7 8 9 10 11 12
]]]

An important point to consider is that the values that we get from the command line are strings.
This is why we have to convert them to the objects we want.
Here we convert the month index into numbers so that we can iterate between them.

A better way is to use the ==#meaning:== message of a particular positional to specify the conversion.
Here we rewrite the command to show you the effect

[[[
myCounter
	<commandline>
	^ (ClapCommand withName: 'bettermonths')
		add: ((ClapPositional withName: 'from')
				meaning: [ :pos | pos word asNumber ];
				implicitMeaning: [ 1 ]);
		add: ((ClapPositional withName: 'to')
				meaning: [ :pos | pos word asNumber ];
				implicitMeaning: [ 12 ]);
		meaning: [ :args |
			| start end |
			start := (args atName: 'from') value.
			end := (args atName: 'to') value.
			args context stdout
				<< 'Counting, '.
			start to: end  do: [ :each | args context stdout << each asString ; space ]
		]
]]]

But a better way to define the behavior is to follow the pattern presented in Section.


!!! Multiple times the same positionable

from SD to CDLM: more here
[[[
ClapCommandLineExamples>>recipients
	^ (arguments at: #who) allOccurrencesCollect: [ :arg | arg value: self ]
]]]


[[[
> clap hello foo bar baz
hello, foo.
hello, bar.
hello, baz.
]]]


!!!Parameter matches, meanings, and values

Let's take a short tangent here, since there are a few things to unpack.

First, to use an argument, in this case the greeting's recipient passed via the ==who== positional, we query for it.
A command matches based on just its name, and once it does, it matches its parameters against the rest of the command line.
The command's behavior is specified by its meaning block, where ==args== receives a ''match'' describing what, where, and how the ==hello== command matched the command line.
Like parameters, matches are recursively structured: ==args== contains a child match describing how the ==who== positional matched, which we obtain with the ==#atName:== query message.
As you can see, matches also provide convenience accessors to the command's execution context, for instance the standard output stream.

@@note from SD to CDLM: I found the match above confusing. Similarly the following paragraph is unclear. I did not get what you want to say. I read the text but it does not mean much to me. I do not understand what is a match nor what is a meaning.

Second, the role of the meaning block of a parameter is to translate matches of that parameter into domain values or behavior.
Clap provides a basic meaning for all parameters, which you can override using the ==#meaning:== accessor; to evaluate the meaning of a given match, send it ==#value==.
Most commands will specify a custom meaning because the basic one just returns the match.
However, for positionals, the basic meaning returns the matched command line word, which happens to be exactly what we need for ==who== in this example.

Finally, let's look at what happens if we run ==hello== but omit the positional:
[[[language=shell
> clap hello
hello, world
]]]

In that case, for lack of an explicit match, the query for =='who'== returns an ''implicit match'', which answers ==#value== using the ==#implicitMeaning:== block instead of the basic meaning, thus returning the recipient =='world'==.


!!!Flags and options

from SD to CDLM: more here please


!!!! default boolean value

tu peux toujours faire ==aFlagMatch isExplicit== pour savoir si il √©tait pr√©sent explicitement

mais aFlagMatch value fait la m√™me chose si tu ne lui as pas donn√© de meaning


!!!Exit success

[[[
meaning: [ :args |
			args exitSuccess
				]
]]]

Usually we do not have to do it since when the block is fully executed an exitSuccess is raised

[[[
meaning: [ :args |
			args exitFailure
				]
]]]

status one

[[[
meaning: [ :args |
			args exitFailure:
				]
]]]

status one


!!!Commands and subcommands

Reoops!
How do I write a command then :(

How we access parent command from subcommand
args context parent probably?

the example is

[[[
myCommand
	‚Äî baseDirectory
	‚Äî months
	‚Äî renter

et je veux dump qui fait un dump donc comme sous commande?

	‚Äî dump
]]]


	comment dump peut acceder a ‚Äîbasedirectory


quittance ‚ÄîbaseDirectory /tmp -dump

]]]


!!! Free help

flag help et command help


!!!! flag help

Create a text based on the command elements (positionables,.... )
[[[
clap hello --help
>

> clap eval --help
]]]

Pay attention the flag should be explicitly check in the command meaning
Because \-\-help takes precedence over the other arguments.

[[[
hello
	"The usual Hello-World example, demonstrating a Clap command with a couple options."

	<commandline>
	^ (ClapCommand withName: 'hello')
		description: 'Provides greetings';
		add: ClapFlag forHelp;
		add: ((ClapFlag withName: 'whisper') description: 'Greet discretely');
		add: ((ClapFlag withName: 'shout') description: 'Greet loudly');
		add:
			((ClapFlag withName: 'language')
				description: 'Select language of greeting';
				add: ((ClapPositional withName: 'langCode')
					meaning: [ :pos | pos word asSymbol ];
					implicitMeaning: [ #en ]);
				meaning: [ :flag | (flag atName: 'langCode') value ]);
		add:
			((ClapPositional withName: 'who')
				description: 'Recipient of the greetings';
				multiple: true;
				implicitMeaning: [ 'world' ]);
		meaning: [ :args |
			args
				atName: 'help'
				ifFound: [ :help |
					help
						value;
						exitSuccess ].
			(self with: args) sayHello ]
]]]


!!!! Command help

A command help also exists. It documents either the commands available or let you specify the one you want.
[[[
pharo80 P8Indian.image clap help
Entry point for commands implemented with Clap

Usage: clap [--help]

Options:
    --help      Prints this documentation

Commands:
    help        Prints command documentation
    evaluate    Print the result of a Pharo expression
    hello       Provides greetings
    version     Displays version information, in various formats
    bettermonths
]]]

[[[
pharo80 P8Indian.image clap help hello
Provides greetings

Usage: hello [--help] [--whisper] [--shout] [--language] [<who>]

Parameters:
    <who>       Recipient of the greetings

Options:
    --help      Prints this documentation
    --whisper   Greet discretely
    --shout     Greet loudly
    --language
                Select language of greeting
]]]


!!! Command vs. flag

flag: you have to manage it explicitly
- add flag ==add: ClapFlag forHelp;==
- in meaning:

[[[
args
	atName: 'help'
	ifFound: [ :help |
		help
			value;
			exitSuccess ].
]]]

command:
Potential Conflict with positional

[[[
> clap hello help
Hello, help
]]]


!! Patterns of command definition


!!! Patterns to express meaning

[[[
meaning: [ :args |
			args
				atName: 'help'
				ifFound: [ :help |
					help
						value;
						exitSuccess ].
			(self with: args) sayHello ]
]]]


[[[
with: arguments
	^ self new
		setArguments: arguments;
		yourself
]]]



Control the border between the shell world (strings) and Pharo objects.
Two choices:
- convert in the meaning block from string to objects
- pass all the arguments to the domain with a specific API


!!Clap Explained

Clap is a framework for adding rich command line interfaces to Pharo code; it sits at the frontier of the image, between application code and the shell environment.
There are two main families of objects in Clap:
- ''Specifications'' describe the syntax and behavior of commands that the image understands.
- ''Activations'' represent command invocations and their arguments, their domain-level meaning, and which words they map to.

Before we start with the details, let's recap the general workflow with Clap:
# On the shell side, the user invokes a command, either directly in the terminal or from a shell script; for convenience, that command would usually be an alias or a small wrapper around the correct Pharo virtual machine and image.
# On the image side, Clap receives the command with its arguments as an array of words, and creates an activation context, matching the arguments with known commands specifications.
# A successful match has meaning defined by application code, which queries the context for domain-level meaning or raw syntax of command parameters, and for external resources like input/output streams.
# When the application code runs to completion, Clap cleanly exits the image. Alternatively, the application can tell the context to terminate early, with a deliberate exit status, or if it fails to handle an exception, Clap catches it and gracefully reports the error.


!!!Specifications

% extending with custom parameter kinds


!!!Activations

+Main specification classes>file://figures/parameters/Specifications.pdf|width=70|label=specificationClasses+
+Main activation classes>file://figures/parameters/Activations.pdf|width=70|label=activationClasses+
+Context and tree of matches>file://figures/parameters/tree.pdf|width=70|label=matchTree+


!!Clap Internals
