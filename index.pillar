!!What is Clap?

Clap is the new library for implementing ''command line applications'' in Pharo.

!!! Command line applications

A command line application consists of a single command, or sometimes a suite of related commands, that you invoke from a terminal session, passing any arguments required.
The example below shows printing month and year with the well-known ==date== shell command:
[[[language=shell
> date +'%B %Y'
September 2019
]]]

@@note In this book, code blocks show either a terminal session, as above, or pieces of Pharo code, which you will recognize from the syntax. In terminal sessions, lines starting with ==>== represent the command prompt followed by a command entered at that point; subsequent lines, up to the next prompt, show the output of that command.

Clap supports applications with rich command line syntax, including positional parameters, flags, options, and even recursive subcommands like ==git==.
However Clap differs a little from command line libraries in other languages, because a single Pharo image can provide multiple commands; in fact, several commands are already included in the base Pharo image.
For this, Clap provides a simple registration mechanism, which allows you to simply load the code of your command in the image to make it available.

!!!Pharo from the command line

Just a parenthesis so that you can play with the tutorial.
Here are some simple steps to get pharo ready from the command line.
The script presupposes that you have a bin folder in your home directory.

The following script downloads the stable vm version of Pharo 80.
Check the web page [https://get.pharo.org/64/](https://get.pharo.org/64/) to get the possible choices.

[[[language=shell
cd ~/bin
curl https://get.pharo.org/64/vm80 | bash
]]]

This script creates two scripts, pharo-ui and pharo-vm both using the contents of the Pharo folder that is also created.

Once installed you can execute pharo as follows:

[[[language=shell
./pharo-ui Pharo8.image
]]]

If you do not want that pharo pops-up a user interface you can invoke it as follows:

[[[language=shell
./pharo Pharo8.image
]]]


!!Clap by Example

Using several simple examples, this document will show you the structure of a command (a name, positional, flags and parameters).
It will show how to define and register a command.


!!!Trying a command from the workspace

The first step in defining a command line application with Clap is to describe its interface.
This is done by composing ''specification'' objects; for instance, the ==cmd== instance below describes a command with no parameters and simple behavior.
[[[
cmd := (ClapCommand withName: 'hello')
  meaning: [ :args |
    args context stdout << 'hello, clap'; lf ].
]]]



For development convenience, arbitrary command objects can be run from the Pharo workspace, by sending them the ==#activateWith:== message, passing the array of words that would be typed to invoke it:
[[[
cmd activateWith: #('hello').
]]]


Keep in mind that Clap commands are intended to be launched from a terminal.
This is why we have to pass that array of **strings**, since that's how all shell programs receive their arguments, but also why you will not see any output inside Pharo: the text gets printed on the standard output ''of the Pharo virtual machine process''.

@@note ''Launch Pharo from the terminal''. Most examples assume an interactive session, but print to the standard output. Launching Pharo from desktop environment means you would run examples blind.

@@note When testing from the image a command using ==#activateWith:== make sure that you only pass strings to the array.

!!!Registering a command for use in the terminal

Because a single Pharo image can host multiple independent Clap commands, Clap relies on a registration mechanism to automatically identify the set of commands available.

To register a command, simply return its specification from a factory method with the ==<commandline>== pragma.
By ''factory method'', we only mean a class-side method, with no argument, and which returns a command specification instance.
Clap does not assume anything else: how you name the method and in which class and package you define it is entirely up to you.

Let's first create a class to host our ==hello== command:
[[[
Object subclass: #ClapBookletHelloExample
  slots: {}
  classVariables: {  }
  package: 'Clap-BookletExamples'
]]]

And then we add a class-side method with the command definition.
Any meaningful unary selector is fine, but do not forget the ==<commandline>== pragma or to return the freshly built ==ClapCommand== instance:
[[[
ClapBookletHelloExample class >> helloClap
  <commandline>
  ^ (ClapCommand withName: 'hello')
    meaning: [ :args |
      args context stdout << 'hello, clap'; lf ]
]]]

Testing from the workspace is now a bit more concise:
[[[
ClapBookletHelloExample helloClap activateWith: #('hello')
]]]

However, you should now be able to run it from the command line as well.
Save your image, and, in a new terminal window, try the following; of course, use your specific virtual machine and image in place of ==pharo clap.image==:
[[[language=shell
> pharo clap.image clap hello
hello, clap
]]]

In command line examples, lines starting with ==>== indicate commands typed at the shell's prompt. Other lines represent the output of those commands.

@@note Pay attention, the case of the command name is important. ==(ClapCommand withName: 'hello')== is different from ==(ClapCommand withName: 'Hello')==.

@@note When developing a command, close the pharo image in which you are coding a command before testing it from the command-line. Else the system may not recognise immediately your new command and report unnecessary errors.

One last detail… You might wonder what the ==clap== word following the Pharo image name in the above definition is for.
At the time of this writing (Pharo 8), this keyword is necessary for Clap to exist alongside the legacy command line handlers.
Eventually, legacy command line handlers should be removed, making the ==clap== keyword superfluous, at which point it will certainly become optional, but in any case, it will be hidden behind the convenience shell aliases or functions that we're going to discuss next.

!!!Shell tricks for convenience and deployment

Time for another little tangent.
You should soon find that repeating the virtual machine and image names before each and every command is quite cumbersome.
To avoid that, we advise that you define the following shell alias:
[[[language=shell
> alias clap='pharo clap.image clap'
]]]

The ==clap== alias abstracts away most of the ceremony and makes it look more like an actual shell command:
[[[language=shell
> clap hello
hello, clap
]]]

To spare even more typing, we can define additional shell aliases as needed.
Our simple ==hello== command could be wrapped like so:
[[[language=shell
> alias hello='pharo clap.image clap hello'
> hello
hello, clap
]]]

However, while aliases make fine shortcuts, they are usually limited to interactive use, as a personal convenience feature.
To deploy a Clap command in the system's ==$PATH==, we need a wrapper shell script:
[[[language=bash
#!/bin/bash
exec pharo clap.image clap "$@"
]]]

Alternatively, shell functions provide an intermediate abstraction measure:
[[[language=bash
#!/bin/bash
function clap() { pharo clap.image clap "$@"; }
function hello() { clap hello "$@"; }
# and later, in the script's body...
hello
]]]

Note the use of =="$@"== to pass all function arguments unchanged to the callee.
Make such a script executable, place it under your ==$PATH==, ''et voilà !''
You now have a shell program implemented in Pharo!

@@note From this point on in the book, we will use the ==clap== shortcut defined above. Either alias or script are fine, since both provide the same syntax, so pick the one you like best.

!!!Specifying parameters

Let's add some features to our basic command: for instance, greet an arbitrary recipient, in Esperanto, and shouting in uppercase letters:
[[[language=shell
> clap hello -s --language EN Pharo
SALUTON, PHARO!
]]]

Clap tries to follow common conventions, but also to keep a simple and coherent model.
- ''Positionals'' are for passing values from an open set, for instance ==Pharo== specifies the greeting recipient; as their name implies, they are recognized from their position, but their form conveys meaning. Because of that positionals must often be parsed into some adequate domain value, like a number or an URL.
- ''Flags'' are recognized from their form, usually beginning with dashes, in either short form like ==-s==, or long form like ==-\-shout==; a fixed set of them is acceptable, so they convey meaning through their presence, absence, number of occurrences, and order in the command line. A flag can have child positionals of its own, resulting in a named parameter, as in ==-\-language EN==. Here ==EN== is attached to the ==--language== named parameter.
- ''Commands'' are identified by a name hello in our example. They can have positionals and flags as children parameters, but also other commands, enabling applications with rich command line syntax like ==git==.


All parameters have a unique and mandatory ''canonical name'', which is the one expected when looking matches up.
Aliases or convenience names supplement the canonical name; for convenience, Clap derives the short and long form of flags from their canonical name, if needed.

@@note SD: what do you mean supplement. then we should put a ref how to define alias.
@@note it would be good to see the definition of clap hello -s --language eo Pharo because it is really not clear. I have no idea what is eo

A ''description string'' will appear in documentation and help messages generated by Clap.
The ''meaning'' of a parameter defines the domain value or behavior of its matches.
Finally, compound parameters are ''composed'' from simpler ones using the ==#add:== message.


!!!Positional parameters

Positionals are the simplest form of parameters; each matches a word from the command line, and successive positionals match in order.

Because it is the position of the matched words that matters, instead of their form, positionals accept an open-ended set of values: numbers, URLs, file paths, application-specific identifiers, arbitrary strings…
However, since order is important, the user has to know which information comes first and which next, and of course they have to pay attention to the word-splitting rules of their shell and use quotes appropriately.

Let's extend the ==hello== command with a positional which specifies the recipient of the greeting.
To do this we make an instance of ==ClapPositional==, naming it ==who==, then we add it as a child to the command, and finally we extend the command's meaning block to use the new argument.
Note that a positional may be not given in such case we specify a default value using the message ==#implicitMeaning:==.

[[[
ClapBookletHelloExample class >> helloClap
  <commandline>
  ^ (ClapCommand withName: 'hello')
    add: ((ClapPositional withName: 'who')
      implicitMeaning: [ 'world' ]);
    meaning: [ :args |
      args context stdout
        << 'hello, ' ;
        << (args atName: 'who') value ;
        lf ]
]]]


We now have a parameterized greeting:

[[[language=shell
> clap hello Pharo
hello, Pharo
]]]

[[[language=shell
> clap hello
hello, world
]]]

!!!! What did we learn

The message ==#implicitMeaning:== provides the default value of the positionable when it is not given.
The messages ==#implicitMeaning:== as well as ==#meaning:== both expect a block as argument.
Also notice how the positionable argument is accessed from the method ==#meaning:== message via the message ==#atName:==.


!!! Playing more with positionals

Let us have fun with positional. Imagine that we want to have a simple command enumerating
consecutive period of the year as months.

[[[
> clap months 2 5
Counting, 2 3 4 5
]]]


[[[
> clap months
Counting, 1 2 3 4 5 6 7 8 9 10 11 12
]]]

We can define the command as follows:

[[[
myCounter
  <commandline>
  ^ (ClapCommand withName: 'months')
    	add: ((ClapPositional withName: 'from') implicitMeaning: [ 1 ]);
	 	add: ((ClapPositional withName: 'to') implicitMeaning: [ 12 ]);
    meaning: [ :args |
		| start end |
		start := (args atName: 'from') value asNumber.
		end := (args atName: 'to') value asNumber.
		args context stdout
			<< 'Counting, '.
		start to: end  do: [ :each | args context stdout << each asString ; space ]
		]
]]]

What we see is that positionals are read in sequence.

[[[
> clap months 5
Counting months, 5 6 7 8 9 10 11 12
]]]

An important point to consider is that the values that we get from the command line are strings.
This is why we have to convert them to the objects we want.
Here we convert the month index into numbers so that we can iterate between them.

A better way is to use the ==#meaning:== message of a particular positional to specify the conversion.
Here we rewrite the command to show you the effect

[[[
myCounter
	<commandline>
	^ (ClapCommand withName: 'bettermonths')
		add: ((ClapPositional withName: 'from')
				meaning: [ :pos | pos word asNumber ];
				implicitMeaning: [ 1 ]);
		add: ((ClapPositional withName: 'to')
				meaning: [ :pos | pos word asNumber ];
				implicitMeaning: [ 12 ]);
		meaning: [ :args |
			| start end |
			start := (args atName: 'from') value.
			end := (args atName: 'to') value.
			args context stdout
				<< 'Counting, '.
			start to: end  do: [ :each | args context stdout << each asString ; space ]
		]
]]]


!!!Parameter matches, meanings, and values

Let's take a short tangent here, since there are a few things to unpack.

First, to use an argument, in this case the greeting's recipient passed via the ==who== positional, we query for it.
A command matches based on just its name, and once it does, it matches its parameters against the rest of the command line.
The command's behavior is specified by its meaning block, where ==args== receives a ''match'' describing what, where, and how the ==hello== command matched the command line.
Like parameters, matches are recursively structured: ==args== contains a child match describing how the ==who== positional matched, which we obtain with the ==#atName:== query message.
As you can see, matches also provide convenience accessors to the command's execution context, for instance the standard output stream.

@@note from SD to CDLM: I found the match above confusing. Similarly the following paragraph is unclear. I did not get what you want to say. I read the text but it does not mean much to me. I do not understand what is a match nor what is a meaning.

Second, the role of the meaning block of a parameter is to translate matches of that parameter into domain values or behavior.
Clap provides a basic meaning for all parameters, which you can override using the ==#meaning:== accessor; to evaluate the meaning of a given match, send it ==#value==.
Most commands will specify a custom meaning because the basic one just returns the match.
However, for positionals, the basic meaning returns the matched command line word, which happens to be exactly what we need for ==who== in this example.

Finally, let's look at what happens if we run ==hello== but omit the positional:
[[[language=shell
> clap hello
hello, world
]]]

In that case, for lack of an explicit match, the query for =='who'== returns an ''implicit match'', which answers ==#value== using the ==#implicitMeaning:== block instead of the basic meaning, thus returning the recipient =='world'==.








!!!Flags and options

oops!


!!!Commands and subcommands

Reoops!
How do I write a command then :(

!!Clap Explained

Clap is a framework for adding rich command line interfaces to Pharo code; it sits at the frontier of the image, between application code and the shell environment.
There are two main families of objects in Clap:
- ''Specifications'' describe the syntax and behavior of commands that the image understands.
- ''Activations'' represent command invocations and their arguments, their domain-level meaning, and which words they map to.

Before we start with the details, let's recap the general workflow with Clap:
# On the shell side, the user invokes a command, either directly in the terminal or from a shell script; for convenience, that command would usually be an alias or a small wrapper around the correct Pharo virtual machine and image.
# On the image side, Clap receives the command with its arguments as an array of words, and creates an activation context, matching the arguments with known commands specifications.
# A successful match has meaning defined by application code, which queries the context for domain-level meaning or raw syntax of command parameters, and for external resources like input/output streams.
# When the application code runs to completion, Clap cleanly exits the image. Alternatively, the application can tell the context to terminate early, with a deliberate exit status, or if it fails to handle an exception, Clap catches it and gracefully reports the error.

!!!Specifications

% extending with custom parameter kinds

!!!Activations

+Main specification classes>file://figures/parameters/Specifications.pdf|width=70|label=specificationClasses+
+Main activation classes>file://figures/parameters/Activations.pdf|width=70|label=activationClasses+
+Context and tree of matches>file://figures/parameters/tree.pdf|width=70|label=matchTree+


!!Clap Internals
